{"componentChunkName":"component---src-templates-post-template-js","path":"/posts/Making A tour of Python 1","result":{"data":{"markdownRemark":{"id":"8686cc7b-c5cc-581e-923b-bb95bf5e77f7","html":"<h2 id=\"코드에디터-구현---aceeditor\" style=\"position:relative;\"><a href=\"#%EC%BD%94%EB%93%9C%EC%97%90%EB%94%94%ED%84%B0-%EA%B5%AC%ED%98%84---aceeditor\" aria-label=\"코드에디터 구현   aceeditor permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>코드에디터 구현 - AceEditor</h2>\n<p>코드를 수정하는 에디터로는 <a href=\"https://ace.c9.io/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">AceEditor</a>를 사용했다. 이미 많은 곳에서 사용하고 있고, <a href=\"https://github.com/securingsincity/react-ace\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">React Wrapping 된 라이브러리</a>도 이미 존재 했기 때문에 쉽게 사용할 수 있었다. 문제는 Brython과 섞어 쓰면서 발생했는데 그건 아래에서 다시 다루겠다.</p>\n<h2 id=\"파이썬-코드-실행---brython\" style=\"position:relative;\"><a href=\"#%ED%8C%8C%EC%9D%B4%EC%8D%AC-%EC%BD%94%EB%93%9C-%EC%8B%A4%ED%96%89---brython\" aria-label=\"파이썬 코드 실행   brython permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>파이썬 코드 실행 - Brython</h2>\n<p>이전글에서 말했듯 Python 인터프리터로는 <a href=\"\">Brython</a>을 택했다. Brython을 사용함으로써 콘솔에 대한 결과값을 가져오는 게 문제였는데, 자바스크립트에서 Brython에 대한 핸들링은 생각보다 어려웠다. 애초에 Brython은 파이썬을 이용하여 브라우저 API를 다루는 것이지. 브라우저에서 파이썬을 이용하기 위해 나온\nf</p>\n<h3 id=\"파이썬-콘솔-구현\" style=\"position:relative;\"><a href=\"#%ED%8C%8C%EC%9D%B4%EC%8D%AC-%EC%BD%98%EC%86%94-%EA%B5%AC%ED%98%84\" aria-label=\"파이썬 콘솔 구현 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>파이썬 콘솔 구현</h3>\n<p>처음에 아이디어는 간단했다. print 함수를 덮어써서 윈도우 객체에 접근해 msg를 써나가는 식으로 접근했다.</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">from</span> browser <span class=\"token keyword\">import</span> window\n\n<span class=\"token comment\"># 재실행 때 중복으로 나타나지 않게 하기위해 미리 초기화</span>\nwindow<span class=\"token punctuation\">.</span>brythonConsole <span class=\"token operator\">=</span> <span class=\"token string\">''</span>\n<span class=\"token keyword\">def</span> <span class=\"token function\">print</span><span class=\"token punctuation\">(</span>msg<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    window<span class=\"token punctuation\">.</span>brythonConsole <span class=\"token operator\">+=</span> msg\n   </code></pre></div>\n<p>이렇게 작성한 뒤 파이썬을 자바스크립트로 컨버팅해주는 모듈(Py2JS)을 사용후 eval을 사용하게 끔 했는데 문제가 발생했다. 파이썬 코드에서 오류가 났을 때 스택트레이스를 가져오는 방법이 없었고, 먼저 Brython에서 함수 호출이 끝난 시점에 대해서 이벤트를 받을 수 있는 방법이 없었다.</p>\n<p>뭔가 방법이 없을까 찾아보다 Brython홈페이지에 이미 에디터가 구현되어 있어서 해당 코드를 참고하여 구현하였다.  일단 스택 트레이스에 대한 부분은 Brython에서는 단순 print를 오버라이드를 사용하여 덮어써서 만든 게 아닌 <code class=\"language-text\">cOutput</code>클래스를 덮어써서 구현하여 스택 트레이스도 가져오게끔 구현하였고, Py2JS가 아닌 에디터의 값도 JS에서 Brython으로 넘겨주는 게 아닌 Brython에서 에디터의 값을 가져와 실행하는 식으로 구현되어 있었다.</p>\n<p>이를 참고하여 나온 최종 코드는 아래와 같았다.</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">from</span> browser <span class=\"token keyword\">import</span> window\n<span class=\"token keyword\">import</span> sys\n<span class=\"token keyword\">import</span> time\n<span class=\"token keyword\">import</span> tb <span class=\"token keyword\">as</span> traceback\n<span class=\"token keyword\">import</span> javascript\n\n<span class=\"token keyword\">from</span> browser <span class=\"token keyword\">import</span> document <span class=\"token keyword\">as</span> doc<span class=\"token punctuation\">,</span> window<span class=\"token punctuation\">,</span> alert<span class=\"token punctuation\">,</span> bind<span class=\"token punctuation\">,</span> html\n\n\noutput <span class=\"token operator\">=</span> <span class=\"token string\">''</span>\neditor <span class=\"token operator\">=</span> doc<span class=\"token punctuation\">[</span><span class=\"token string\">'python-code'</span><span class=\"token punctuation\">]</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">cOutput</span><span class=\"token punctuation\">:</span>\n    encoding <span class=\"token operator\">=</span> <span class=\"token string\">'utf-8'</span>\n\n    <span class=\"token keyword\">def</span> <span class=\"token function\">__init__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        self<span class=\"token punctuation\">.</span>cons <span class=\"token operator\">=</span> doc<span class=\"token punctuation\">[</span><span class=\"token string\">\"console\"</span><span class=\"token punctuation\">]</span>\n        self<span class=\"token punctuation\">.</span>buf <span class=\"token operator\">=</span> <span class=\"token string\">''</span>\n\n    <span class=\"token keyword\">def</span> <span class=\"token function\">write</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        self<span class=\"token punctuation\">.</span>buf <span class=\"token operator\">+=</span> <span class=\"token builtin\">str</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">)</span>\n\n    <span class=\"token keyword\">def</span> <span class=\"token function\">flush</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        self<span class=\"token punctuation\">.</span>cons<span class=\"token punctuation\">.</span>value <span class=\"token operator\">+=</span> self<span class=\"token punctuation\">.</span>buf\n        self<span class=\"token punctuation\">.</span>buf <span class=\"token operator\">=</span> <span class=\"token string\">''</span>\n\n    <span class=\"token keyword\">def</span> <span class=\"token function\">__len__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">return</span> <span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">.</span>buf<span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">if</span> <span class=\"token string\">\"console\"</span> <span class=\"token keyword\">in</span> doc<span class=\"token punctuation\">:</span>\n    cOut <span class=\"token operator\">=</span> cOutput<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    sys<span class=\"token punctuation\">.</span>stdout <span class=\"token operator\">=</span> cOut\n    sys<span class=\"token punctuation\">.</span>stderr <span class=\"token operator\">=</span> cOut\n\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">run</span><span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>args<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">global</span> output\n    doc<span class=\"token punctuation\">[</span><span class=\"token string\">\"console\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>value <span class=\"token operator\">=</span> <span class=\"token string\">''</span>\n    src <span class=\"token operator\">=</span> window<span class=\"token punctuation\">.</span>pythonCode\n    window<span class=\"token punctuation\">.</span>brythonConsole <span class=\"token operator\">=</span><span class=\"token string\">''</span>\n    t0 <span class=\"token operator\">=</span> time<span class=\"token punctuation\">.</span>perf_counter<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">try</span><span class=\"token punctuation\">:</span>\n        ns <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token string\">'__name__'</span><span class=\"token punctuation\">:</span><span class=\"token string\">'__main__'</span><span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">exec</span><span class=\"token punctuation\">(</span>src<span class=\"token punctuation\">,</span> ns<span class=\"token punctuation\">)</span>\n        state <span class=\"token operator\">=</span> <span class=\"token number\">1</span>\n    <span class=\"token keyword\">except</span> Exception <span class=\"token keyword\">as</span> exc<span class=\"token punctuation\">:</span>\n        traceback<span class=\"token punctuation\">.</span>print_exc<span class=\"token punctuation\">(</span><span class=\"token builtin\">file</span><span class=\"token operator\">=</span>sys<span class=\"token punctuation\">.</span>stderr<span class=\"token punctuation\">)</span>\n        state <span class=\"token operator\">=</span> <span class=\"token number\">0</span>\n    sys<span class=\"token punctuation\">.</span>stdout<span class=\"token punctuation\">.</span>flush<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    output <span class=\"token operator\">=</span> doc<span class=\"token punctuation\">[</span><span class=\"token string\">\"console\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>value <span class=\"token operator\">+</span> <span class=\"token string\">'\\n&lt;completed in %6.2f ms>'</span> <span class=\"token operator\">%</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>time<span class=\"token punctuation\">.</span>perf_counter<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span> t0<span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> <span class=\"token number\">1000.0</span><span class=\"token punctuation\">)</span>\n    window<span class=\"token punctuation\">.</span>brythonConsole <span class=\"token operator\">=</span> output\n    <span class=\"token keyword\">return</span> state\n\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">to_str</span><span class=\"token punctuation\">(</span>xx<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">return</span> <span class=\"token builtin\">str</span><span class=\"token punctuation\">(</span>xx<span class=\"token punctuation\">)</span>\n\nrun<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>위와 같이 만든 뒤 리액트 코드에서는 그냥 지속적으로 결과를 업데이트 하는 방식으로 구현했다. 이벤트를 좀더 명확하게 캐치할 수 있는 방법이 있다면 좋겠지만, Brython에 익숙하지 않아서 이게 가능한 지를 찾지 못했고, 일단 브라우저 코드 에디터가 목표가 아닌 학습 사이트가 목표이기 때문에, 저런 것 까지 신경쓰는 건 오버엔지니어링이라는 생각이 들었다. 그렇게 작성된 코드는 아래와 같다.</p>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token function\">useEffect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> interval <span class=\"token operator\">=</span> <span class=\"token function\">setInterval</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">setResult</span><span class=\"token punctuation\">(</span>win<span class=\"token punctuation\">.</span>brythonConsole<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token number\">250</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token function\">clearInterval</span><span class=\"token punctuation\">(</span>interval<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>이렇게 기본적으로 코드를 작성하고 실행시키는 걸 완성하였다. 다음 글에선 코드랑 텍스트를 가져오는 것에 대해서 적을 예정이다. 특별한 방법을 사용한 건 아니지만 아직 인덱싱을 구현하지 않아서 인덱싱 구현 후 글을 작성할 예정이다.</p>","fields":{"slug":"/posts/Making A tour of Python 1","tagSlugs":["/tag/react/","/tag/python/","/tag/brython/"]},"frontmatter":{"date":"2021-03-06T09:00:00.000Z","description":"최근에 파이썬을 가르쳐 주려고 보니, Go에는 A tour of go 같은 게 있는데 파이썬은 없는지 확인해 보니 없는 것 같았다. (못 찾은 거일 수도 있지만...) 물론 코드카데미 같은 곳도 있긴 하겠지만 별로 가벼운 서비스는 아니라고 생각이 들어서, 최근에 목말랐던 사이드 프로젝트에 대한 욕구도 충족하기 위해 직접 만들어 보기로 했다.","tags":["React","Python","Brython"],"title":"A Tour of Python 만들기 (1) - 에디터와 콘솔 구현하기","socialImage":"/posts/2021-03-06/earth-python.png"}}},"pageContext":{"slug":"/posts/Making A tour of Python 1"}}}